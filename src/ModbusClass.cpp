/*----- PROTECTED REGION ID(ModbusClass.cpp) ENABLED START -----*/
static const char *RcsId      = "$Id:  $";
static const char *TagName    = "$Name:  $";
static const char *CvsPath    = "$Source:  $";
static const char *SvnPath    = "$HeadURL:  $";
static const char *HttpServer = "http://www.esrf.eu/computing/cs/tango/tango_doc/ds_doc/";
//=============================================================================
//
// file :        ModbusClass.cpp
//
// description : C++ source for the ModbusClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the Modbus once per process.
//
// project :     Modbus
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <ModbusClass.h>

/*----- PROTECTED REGION END -----*/	//	ModbusClass.cpp

//-------------------------------------------------------------------
/**
 *	Create ModbusClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_Modbus_class(const char *name) {
		return Modbus_ns::ModbusClass::init(name);
	}
}

namespace Modbus_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
ModbusClass *ModbusClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		ModbusClass::ModbusClass(string &s)
 * description : 	constructor for the ModbusClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
ModbusClass::ModbusClass(string &s):Tango::DeviceClass(s)
{
	cout2 << "Entering ModbusClass constructor" << endl;
	set_default_property();
	write_class_property();

	/*----- PROTECTED REGION ID(ModbusClass::constructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	ModbusClass::constructor

	cout2 << "Leaving ModbusClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		ModbusClass::~ModbusClass()
 * description : 	destructor for the ModbusClass
 */
//--------------------------------------------------------
ModbusClass::~ModbusClass()
{
	/*----- PROTECTED REGION ID(ModbusClass::destructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	ModbusClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		ModbusClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
ModbusClass *ModbusClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new ModbusClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}
	}
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		ModbusClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
ModbusClass *ModbusClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		ForceSingleCoilClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ForceSingleCoilClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ForceSingleCoilClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<Modbus *>(device))->force_single_coil(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ReadCoilStatusClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ReadCoilStatusClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ReadCoilStatusClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	return insert((static_cast<Modbus *>(device))->read_coil_status(argin));
}

//--------------------------------------------------------
/**
 * method : 		ReadInputStatusClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ReadInputStatusClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ReadInputStatusClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	return insert((static_cast<Modbus *>(device))->read_input_status(argin));
}

//--------------------------------------------------------
/**
 * method : 		ReadHoldingRegistersClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ReadHoldingRegistersClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ReadHoldingRegistersClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	return insert((static_cast<Modbus *>(device))->read_holding_registers(argin));
}

//--------------------------------------------------------
/**
 * method : 		ReadInputRegistersClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ReadInputRegistersClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ReadInputRegistersClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	return insert((static_cast<Modbus *>(device))->read_input_registers(argin));
}

//--------------------------------------------------------
/**
 * method : 		PresetSingleRegisterClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *PresetSingleRegisterClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "PresetSingleRegisterClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<Modbus *>(device))->preset_single_register(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		FetchCommEventCtrClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *FetchCommEventCtrClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "FetchCommEventCtrClass::execute(): arrived" << endl;
	return insert((static_cast<Modbus *>(device))->fetch_comm_event_ctr());
}

//--------------------------------------------------------
/**
 * method : 		ForceMultipleCoilsClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ForceMultipleCoilsClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ForceMultipleCoilsClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<Modbus *>(device))->force_multiple_coils(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ReadMultipleCoilsStatusClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ReadMultipleCoilsStatusClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ReadMultipleCoilsStatusClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	return insert((static_cast<Modbus *>(device))->read_multiple_coils_status(argin));
}

//--------------------------------------------------------
/**
 * method : 		PresetMultipleRegistersClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *PresetMultipleRegistersClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "PresetMultipleRegistersClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<Modbus *>(device))->preset_multiple_registers(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		MaskWriteRegisterClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *MaskWriteRegisterClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "MaskWriteRegisterClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<Modbus *>(device))->mask_write_register(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ReadWriteRegisterClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ReadWriteRegisterClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ReadWriteRegisterClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	return insert((static_cast<Modbus *>(device))->read_write_register(argin));
}

//--------------------------------------------------------
/**
 * method : 		PresetSingleRegisterBroadcastClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *PresetSingleRegisterBroadcastClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "PresetSingleRegisterBroadcastClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<Modbus *>(device))->preset_single_register_broadcast(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ReadExceptionStatusClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ReadExceptionStatusClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ReadExceptionStatusClass::execute(): arrived" << endl;
	return insert((static_cast<Modbus *>(device))->read_exception_status());
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : ModbusClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum ModbusClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : ModbusClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum ModbusClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : ModbusClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum ModbusClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : ModbusClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void ModbusClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties

	//	Set Default device Properties
	prop_name = "Protocol";
	prop_desc = "RTU => Binary serial communication.\nTCP => Communication over ethernet.";
	prop_def  = "RTU";
	vect_data.clear();
	vect_data.push_back("RTU");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Iphost";
	prop_desc = "The host IP address used with the TCP protocol";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Serialline";
	prop_desc = "The name of the serial line device used with RTU protocol";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Address";
	prop_desc = "Node index used with the RTU or TCP protocol";
	prop_def  = "1";
	vect_data.clear();
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "CacheConfig";
	prop_desc = "Describe which data has to be cached.\nEach set of cached data is described by 3 parameters which are:\n1 - Command to be used to read data (ReadHoldingRegisters, ReadInputStatus\nReadInutRegisters or ReadMultipleCoilStatus)\n2 - First address to be read\n3 - Number of data to read";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "CacheSleep";
	prop_desc = "Cache update thread main loop sleeping time (in ms)CacheSleep";
	prop_def  = "1000";
	vect_data.clear();
	vect_data.push_back("1000");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "TCPConnectTimeout";
	prop_desc = "TCP connection timeout (in sec)";
	prop_def  = "0.3";
	vect_data.clear();
	vect_data.push_back("0.3");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "TCPTimeout";
	prop_desc = "Timeout used when the TCP protocol is used (in sec)";
	prop_def  = "1.0";
	vect_data.clear();
	vect_data.push_back("1.0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "LogFile";
	prop_desc = "Name of the file where are stored invalid frame";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "TCPNoDelay";
	prop_desc = "Disable or enable Nagle`s algorithm.";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "TCPQuickAck";
	prop_desc = "Set this property to true to enable TCP quick acknowledgements";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "NumberOfRetry";
	prop_desc = "Number Of Retry for all command in case failed.";
	prop_def  = "0";
	vect_data.clear();
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "SleepBetweenRetry";
	prop_desc = "Sleep Between Retry in Miliseconds";
	prop_def  = "100";
	vect_data.clear();
	vect_data.push_back("100");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : ModbusClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void ModbusClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("Modbus");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("A Class to handle the modbus protocol over TCP/IP or Serial (RTU).");
	description << str_desc;
	data.push_back(description);

	//	put cvs or svn location
	string	filename("Modbus");
	filename += "Class.cpp";

	// check for cvs information
	string	src_path(CvsPath);
	start = src_path.find("/");
	if (start!=string::npos)
	{
		end   = src_path.find(filename);
		if (end>start)
		{
			string	strloc = src_path.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}

	// check for svn information
	else
	{
		string	src_path(SvnPath);
		start = src_path.find("://");
		if (start!=string::npos)
		{
			end = src_path.find(filename);
			if (end>start)
			{
				header = "$HeadURL: ";
				start = header.length();
				string	strloc = src_path.substr(start, (end-start));
				
				Tango::DbDatum	svn_loc("svn_location");
				svn_loc << strloc;
				data.push_back(svn_loc);
			}
		}
	}

	//	Get CVS or SVN revision tag
	
	// CVS tag
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}
	
	// SVN tag
	string	svnpath(SvnPath);
	header = "$HeadURL: ";
	start = header.length();
	
	end   = svnpath.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strloc = svnpath.substr(start, end-start);
		
		string tagstr ("/tags/");
		start = strloc.find(tagstr);
		if ( start!=string::npos )
		{
			start = start + tagstr.length();
			end   = strloc.find(filename);
			string	strtag = strloc.substr(start, end-start-1);
			
			Tango::DbDatum	svn_tag("svn_tag");
			svn_tag << strtag;
			data.push_back(svn_tag);
		}
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : ModbusClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void ModbusClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(ModbusClass::device_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ModbusClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new Modbus(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		Modbus *dev = static_cast<Modbus *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(ModbusClass::device_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ModbusClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : ModbusClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void ModbusClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(ModbusClass::attribute_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ModbusClass::attribute_factory_before

	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(ModbusClass::attribute_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ModbusClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : ModbusClass::pipe_factory()
 *	Description : Create the pipe object(s)
 *                and store them in the pipe list
 */
//--------------------------------------------------------
void ModbusClass::pipe_factory()
{
	/*----- PROTECTED REGION ID(ModbusClass::pipe_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ModbusClass::pipe_factory_before
	/*----- PROTECTED REGION ID(ModbusClass::pipe_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ModbusClass::pipe_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : ModbusClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void ModbusClass::command_factory()
{
	/*----- PROTECTED REGION ID(ModbusClass::command_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ModbusClass::command_factory_before


	//	Command ForceSingleCoil
	ForceSingleCoilClass	*pForceSingleCoilCmd =
		new ForceSingleCoilClass("ForceSingleCoil",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"aring[0] = coil address\nargin[1] = coil value (0/1)",
			"",
			Tango::OPERATOR);
	command_list.push_back(pForceSingleCoilCmd);

	//	Command ReadCoilStatus
	ReadCoilStatusClass	*pReadCoilStatusCmd =
		new ReadCoilStatusClass("ReadCoilStatus",
			Tango::DEV_SHORT, Tango::DEV_SHORT,
			"Coil address",
			"Coil status (0/1)",
			Tango::OPERATOR);
	command_list.push_back(pReadCoilStatusCmd);

	//	Command ReadInputStatus
	ReadInputStatusClass	*pReadInputStatusCmd =
		new ReadInputStatusClass("ReadInputStatus",
			Tango::DEVVAR_SHORTARRAY, Tango::DEVVAR_CHARARRAY,
			"argin[0] = Input address\nargin[1] = number of inputs",
			"argout[0..n-1] = Input status (0/1)",
			Tango::OPERATOR);
	command_list.push_back(pReadInputStatusCmd);

	//	Command ReadHoldingRegisters
	ReadHoldingRegistersClass	*pReadHoldingRegistersCmd =
		new ReadHoldingRegistersClass("ReadHoldingRegisters",
			Tango::DEVVAR_SHORTARRAY, Tango::DEVVAR_SHORTARRAY,
			"aring[0] = Register start address\nargin[1] = Number of registers",
			"argout[0..n-1] Holding 16bits registers.",
			Tango::OPERATOR);
	command_list.push_back(pReadHoldingRegistersCmd);

	//	Command ReadInputRegisters
	ReadInputRegistersClass	*pReadInputRegistersCmd =
		new ReadInputRegistersClass("ReadInputRegisters",
			Tango::DEVVAR_SHORTARRAY, Tango::DEVVAR_SHORTARRAY,
			"argin[0] = Register start address\nargin[1] = Number of registers",
			"argout[0..n-1] = Input 16bits registers",
			Tango::OPERATOR);
	command_list.push_back(pReadInputRegistersCmd);

	//	Command PresetSingleRegister
	PresetSingleRegisterClass	*pPresetSingleRegisterCmd =
		new PresetSingleRegisterClass("PresetSingleRegister",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"argin[0] = Register address\nargin[1] = Register value",
			"",
			Tango::OPERATOR);
	command_list.push_back(pPresetSingleRegisterCmd);

	//	Command FetchCommEventCtr
	FetchCommEventCtrClass	*pFetchCommEventCtrCmd =
		new FetchCommEventCtrClass("FetchCommEventCtr",
			Tango::DEV_VOID, Tango::DEVVAR_SHORTARRAY,
			"",
			"argout[0] = Status\nargout[1] = Event count",
			Tango::OPERATOR);
	command_list.push_back(pFetchCommEventCtrCmd);

	//	Command ForceMultipleCoils
	ForceMultipleCoilsClass	*pForceMultipleCoilsCmd =
		new ForceMultipleCoilsClass("ForceMultipleCoils",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"argin[0] = Coil start address\nargin[1] = Number of coil\nargin[2..n+1] = Coil values",
			"",
			Tango::OPERATOR);
	command_list.push_back(pForceMultipleCoilsCmd);

	//	Command ReadMultipleCoilsStatus
	ReadMultipleCoilsStatusClass	*pReadMultipleCoilsStatusCmd =
		new ReadMultipleCoilsStatusClass("ReadMultipleCoilsStatus",
			Tango::DEVVAR_SHORTARRAY, Tango::DEVVAR_SHORTARRAY,
			"argin[0] = Coil start address\nargin[1] = Number of coils",
			"argout[0..n-1] = Coil values",
			Tango::OPERATOR);
	command_list.push_back(pReadMultipleCoilsStatusCmd);

	//	Command PresetMultipleRegisters
	PresetMultipleRegistersClass	*pPresetMultipleRegistersCmd =
		new PresetMultipleRegistersClass("PresetMultipleRegisters",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"argin[0] = Register start address\nargin[1] = Number of register\nargin[2..n+1] = Register values",
			"",
			Tango::OPERATOR);
	command_list.push_back(pPresetMultipleRegistersCmd);

	//	Command MaskWriteRegister
	MaskWriteRegisterClass	*pMaskWriteRegisterCmd =
		new MaskWriteRegisterClass("MaskWriteRegister",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"argin[0] = Register address\nargin[1] = AND mask\nargin[2] = OR mask",
			"",
			Tango::OPERATOR);
	command_list.push_back(pMaskWriteRegisterCmd);

	//	Command ReadWriteRegister
	ReadWriteRegisterClass	*pReadWriteRegisterCmd =
		new ReadWriteRegisterClass("ReadWriteRegister",
			Tango::DEVVAR_SHORTARRAY, Tango::DEVVAR_SHORTARRAY,
			"argin[0] = Read start address\nargin[1] = Number of registers to read\nargin[2] = Write start address\nargin[3] = Number of registers to write\nargin[4..n+3] = Register values",
			"argout[0..n-1] = Register values",
			Tango::OPERATOR);
	command_list.push_back(pReadWriteRegisterCmd);

	//	Command PresetSingleRegisterBroadcast
	PresetSingleRegisterBroadcastClass	*pPresetSingleRegisterBroadcastCmd =
		new PresetSingleRegisterBroadcastClass("PresetSingleRegisterBroadcast",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"argin[0] = Register address\nargin[1] = Register value",
			"",
			Tango::OPERATOR);
	command_list.push_back(pPresetSingleRegisterBroadcastCmd);

	//	Command ReadExceptionStatus
	ReadExceptionStatusClass	*pReadExceptionStatusCmd =
		new ReadExceptionStatusClass("ReadExceptionStatus",
			Tango::DEV_VOID, Tango::DEV_SHORT,
			"",
			"Exception status",
			Tango::OPERATOR);
	command_list.push_back(pReadExceptionStatusCmd);

	/*----- PROTECTED REGION ID(ModbusClass::command_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ModbusClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		ModbusClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list
 */
//--------------------------------------------------------
void ModbusClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(ModbusClass::create_static_att_list) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	ModbusClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		ModbusClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void ModbusClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		Modbus *dev = static_cast<Modbus *> (dev_impl);

		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(ModbusClass::erase_dynamic_attributes) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	ModbusClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : ModbusClass::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *ModbusClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; ++it)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(ModbusClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	ModbusClass::Additional Methods
} //	namespace
