/*----- PROTECTED REGION ID(ModbusStateMachine.cpp) ENABLED START -----*/
static const char *RcsId = "$Id: ModbusStateMachine.cpp,v 1.2 2012-11-07 08:56:13 pascal_verdier Exp $";
//=============================================================================
//
// file :        ModbusStateMachine.cpp
//
// description : State machine file for the Modbus class
//
// project :     Modbus
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author: pascal_verdier $
//
// $Revision: 1.2 $
// $Date: 2012-11-07 08:56:13 $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <Modbus.h>

/*----- PROTECTED REGION END -----*/	//	Modbus::ModbusStateMachine.cpp

//================================================================
//  States  |  Description
//================================================================


namespace Modbus_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================

//=================================================
//		Commands Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : Modbus::is_ForceSingleCoil_allowed()
 *	Description : Execution allowed for ForceSingleCoil attribute
 */
//--------------------------------------------------------
bool Modbus::is_ForceSingleCoil_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ForceSingleCoil command.
	/*----- PROTECTED REGION ID(Modbus::ForceSingleCoilStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Modbus::ForceSingleCoilStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Modbus::is_ReadCoilStatus_allowed()
 *	Description : Execution allowed for ReadCoilStatus attribute
 */
//--------------------------------------------------------
bool Modbus::is_ReadCoilStatus_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ReadCoilStatus command.
	/*----- PROTECTED REGION ID(Modbus::ReadCoilStatusStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Modbus::ReadCoilStatusStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Modbus::is_ReadInputStatus_allowed()
 *	Description : Execution allowed for ReadInputStatus attribute
 */
//--------------------------------------------------------
bool Modbus::is_ReadInputStatus_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ReadInputStatus command.
	/*----- PROTECTED REGION ID(Modbus::ReadInputStatusStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Modbus::ReadInputStatusStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Modbus::is_ReadHoldingRegisters_allowed()
 *	Description : Execution allowed for ReadHoldingRegisters attribute
 */
//--------------------------------------------------------
bool Modbus::is_ReadHoldingRegisters_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ReadHoldingRegisters command.
	/*----- PROTECTED REGION ID(Modbus::ReadHoldingRegistersStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Modbus::ReadHoldingRegistersStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Modbus::is_ReadInputRegisters_allowed()
 *	Description : Execution allowed for ReadInputRegisters attribute
 */
//--------------------------------------------------------
bool Modbus::is_ReadInputRegisters_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ReadInputRegisters command.
	/*----- PROTECTED REGION ID(Modbus::ReadInputRegistersStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Modbus::ReadInputRegistersStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Modbus::is_PresetSingleRegister_allowed()
 *	Description : Execution allowed for PresetSingleRegister attribute
 */
//--------------------------------------------------------
bool Modbus::is_PresetSingleRegister_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for PresetSingleRegister command.
	/*----- PROTECTED REGION ID(Modbus::PresetSingleRegisterStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Modbus::PresetSingleRegisterStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Modbus::is_ReadExceptionStatus_allowed()
 *	Description : Execution allowed for ReadExceptionStatus attribute
 */
//--------------------------------------------------------
bool Modbus::is_ReadExceptionStatus_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ReadExceptionStatus command.
	/*----- PROTECTED REGION ID(Modbus::ReadExceptionStatusStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Modbus::ReadExceptionStatusStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Modbus::is_FetchCommEventCtr_allowed()
 *	Description : Execution allowed for FetchCommEventCtr attribute
 */
//--------------------------------------------------------
bool Modbus::is_FetchCommEventCtr_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for FetchCommEventCtr command.
	/*----- PROTECTED REGION ID(Modbus::FetchCommEventCtrStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Modbus::FetchCommEventCtrStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Modbus::is_ForceMultipleCoils_allowed()
 *	Description : Execution allowed for ForceMultipleCoils attribute
 */
//--------------------------------------------------------
bool Modbus::is_ForceMultipleCoils_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ForceMultipleCoils command.
	/*----- PROTECTED REGION ID(Modbus::ForceMultipleCoilsStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Modbus::ForceMultipleCoilsStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Modbus::is_ReadMultipleCoilsStatus_allowed()
 *	Description : Execution allowed for ReadMultipleCoilsStatus attribute
 */
//--------------------------------------------------------
bool Modbus::is_ReadMultipleCoilsStatus_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ReadMultipleCoilsStatus command.
	/*----- PROTECTED REGION ID(Modbus::ReadMultipleCoilsStatusStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Modbus::ReadMultipleCoilsStatusStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Modbus::is_PresetMultipleRegisters_allowed()
 *	Description : Execution allowed for PresetMultipleRegisters attribute
 */
//--------------------------------------------------------
bool Modbus::is_PresetMultipleRegisters_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for PresetMultipleRegisters command.
	/*----- PROTECTED REGION ID(Modbus::PresetMultipleRegistersStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Modbus::PresetMultipleRegistersStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Modbus::is_MaskWriteRegister_allowed()
 *	Description : Execution allowed for MaskWriteRegister attribute
 */
//--------------------------------------------------------
bool Modbus::is_MaskWriteRegister_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for MaskWriteRegister command.
	/*----- PROTECTED REGION ID(Modbus::MaskWriteRegisterStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Modbus::MaskWriteRegisterStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Modbus::is_ReadWriteRegister_allowed()
 *	Description : Execution allowed for ReadWriteRegister attribute
 */
//--------------------------------------------------------
bool Modbus::is_ReadWriteRegister_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ReadWriteRegister command.
	/*----- PROTECTED REGION ID(Modbus::ReadWriteRegisterStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Modbus::ReadWriteRegisterStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Modbus::is_PresetSingleRegisterBroadcast_allowed()
 *	Description : Execution allowed for PresetSingleRegisterBroadcast attribute
 */
//--------------------------------------------------------
bool Modbus::is_PresetSingleRegisterBroadcast_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for PresetSingleRegisterBroadcast command.
	/*----- PROTECTED REGION ID(Modbus::PresetSingleRegisterBroadcastStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Modbus::PresetSingleRegisterBroadcastStateAllowed
	return true;
}

}	//	End of namespace
