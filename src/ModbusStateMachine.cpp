static const char *RcsId = "$Header: /users/chaize/newsvn/cvsroot/Communication/Modbus/src/ModbusStateMachine.cpp,v 1.1 2009-02-25 13:58:41 buteau Exp $";
//+=============================================================================
//
// file :         ModbusStateMachine.cpp
//
// description :  C++ source for the Modbus and its alowed. 
//                method for commands and attributes
//
// project :      TANGO Device Server
//
// $Author: buteau $
//
// $Revision: 1.1 $
//
// $Log: not supported by cvs2svn $
// Revision 1.3  2006/12/01 15:04:31  jensmeyer
// Added the command ReadMultipleCoilsStatus to read several coils (bits)
// at the same time.
//
// Revision 1.2  2005/03/31 15:07:05  jlpons
// Changed namespace name
//
// Revision 1.1  2005/01/14 15:36:55  jlpons
// Initial import
//
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#include <tango.h>
#include <Modbus.h>
#include <ModbusClass.h>

/*====================================================================
 *	This file contains the methods to allow commands and attributes
 * read or write execution.
 *
 * If you wand to add your own code, add it between 
 * the "End/Re-Start of Generated Code" comments.
 *
 * If you want, you can also add your own methods.
 *====================================================================
 */

namespace Modbus_ns
{

//=================================================
//		Attributes Allowed Methods
//=================================================


//=================================================
//		Commands Allowed Methods
//=================================================

//+----------------------------------------------------------------------------
//
// method : 		Modbus::is_ForceSingleCoil_allowed
// 
// description : 	Execution allowed for ForceSingleCoil command.
//
//-----------------------------------------------------------------------------
bool Modbus::is_ForceSingleCoil_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Modbus::is_ReadCoilStatus_allowed
// 
// description : 	Execution allowed for ReadCoilStatus command.
//
//-----------------------------------------------------------------------------
bool Modbus::is_ReadCoilStatus_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Modbus::is_ReadInputStatus_allowed
// 
// description : 	Execution allowed for ReadInputStatus command.
//
//-----------------------------------------------------------------------------
bool Modbus::is_ReadInputStatus_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Modbus::is_ReadHoldingRegisters_allowed
// 
// description : 	Execution allowed for ReadHoldingRegisters command.
//
//-----------------------------------------------------------------------------
bool Modbus::is_ReadHoldingRegisters_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Modbus::is_ReadInputRegisters_allowed
// 
// description : 	Execution allowed for ReadInputRegisters command.
//
//-----------------------------------------------------------------------------
bool Modbus::is_ReadInputRegisters_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Modbus::is_PresetSingleRegister_allowed
// 
// description : 	Execution allowed for PresetSingleRegister command.
//
//-----------------------------------------------------------------------------
bool Modbus::is_PresetSingleRegister_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Modbus::is_ReadExceptionStatus_allowed
// 
// description : 	Execution allowed for ReadExceptionStatus command.
//
//-----------------------------------------------------------------------------
bool Modbus::is_ReadExceptionStatus_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Modbus::is_FetchCommEventCtr_allowed
// 
// description : 	Execution allowed for FetchCommEventCtr command.
//
//-----------------------------------------------------------------------------
bool Modbus::is_FetchCommEventCtr_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Modbus::is_ForceMultipleCoils_allowed
// 
// description : 	Execution allowed for ForceMultipleCoils command.
//
//-----------------------------------------------------------------------------
bool Modbus::is_ForceMultipleCoils_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Modbus::is_PresetMultipleRegisters_allowed
// 
// description : 	Execution allowed for PresetMultipleRegisters command.
//
//-----------------------------------------------------------------------------
bool Modbus::is_PresetMultipleRegisters_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Modbus::is_MaskWriteRegister_allowed
// 
// description : 	Execution allowed for MaskWriteRegister command.
//
//-----------------------------------------------------------------------------
bool Modbus::is_MaskWriteRegister_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Modbus::is_ReadWriteRegister_allowed
// 
// description : 	Execution allowed for ReadWriteRegister command.
//
//-----------------------------------------------------------------------------
bool Modbus::is_ReadWriteRegister_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Modbus::is_ReadMultipleCoilsStatus_allowed
// 
// description : 	Execution allowed for ReadMultipleCoilsStatus command.
//
//-----------------------------------------------------------------------------
bool Modbus::is_ReadMultipleCoilsStatus_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}

}	// namespace Modbus
